version: "3"

services:
  mediawiki:
    build:
      context: ./mediawiki
      target: dev
    restart: 'no'
    volumes:
      - ./mediawiki/LocalSettings.php:${MW_INSTALL_PATH}/LocalSettings.php
    environment:
      WIKI_DEBUG:
      WIKI_DISABLE_CACHE:
    labels:
      traefik.http.routers.wiki-secure.tls.certresolver: pebble
    networks:
      - smtp

  mariadb:
    restart: 'no'

  redis:
    restart: 'no'

  traefik:
    restart: 'no'
    environment:
      TRAEFIK_LOG_LEVEL: DEBUG
      TRAEFIK_API_DASHBOARD: "true"
      TRAEFIK_API_INSECURE: "true"
      LEGO_CA_CERTIFICATES: /var/pebble-test-certs/pebble.minica.pem
      LEGO_CA_SERVER_NAME: pebble
      TRAEFIK_CERTIFICATESRESOLVERS_pebble_ACME_CASERVER: https://pebble:14000/dir
      TRAEFIK_CERTIFICATESRESOLVERS_pebble_ACME_EMAIL: ${ACME_EMAIL}
      TRAEFIK_CERTIFICATESRESOLVERS_pebble_ACME_STORAGE: /etc/traefik/acme/acme.json
      TRAEFIK_CERTIFICATESRESOLVERS_pebble_ACME_TLSCHALLENGE: "true"
    volumes:
      - pebble-test-certs:/var/pebble-test-certs
    ports:
      - 8080:8080
    networks:
      - acme
    depends_on:
      - pebble

  pebble:
    image: letsencrypt/pebble
    # when container stop all account in memory will lost
    # that cause error to acme client which save account crendential already,
    # so we remove all acme data in the shared volume each start
    command: sh -c "rm -rf /data/* && pebble -config /test/my-pebble-config.json"
    volumes:
      - acme-data:/data
      - pebble-test-certs:/test/certs
      - ./pebble/my-pebble-config.json:/test/my-pebble-config.json
    networks:
      acme:
    extra_hosts:
      - ${WIKI_HOST}:host-gateway

  mailcatcher:
    image: sj26/mailcatcher:latest
    labels:
      traefik.enable: "true"
      traefik.http.routers.mailcatcher.rule: Host(`${MAILCATCHER_HOST}`)
      traefik.http.routers.mailcatcher.entrypoints: web
      traefik.http.services.mailcatcher.loadbalancer.server.port: 1080
    networks:
      - smtp
      - web

  minio:
    image: minio/minio
    labels:
      traefik.enable: "true"
      traefik.http.routers.minio.service: minio
      traefik.http.routers.minio.entrypoints: web
      traefik.http.routers.minio.rule: Host(`${MINIO_HOST}`)
      traefik.http.services.minio.loadbalancer.server.port: 9000
      traefik.http.routers.minio-console.service: minio-console
      traefik.http.routers.minio-console.entrypoints: web
      traefik.http.routers.minio-console.rule: Host(`${MINIO_CONSOLE_HOST}`)
      traefik.http.services.minio-console.loadbalancer.server.port: 9001
    environment:
      # about the credentials
      # https://docs.min.io/minio/baremetal/reference/minio-server/minio-server.html#id6
      MINIO_BROWSER_REDIRECT_URL: http://${MINIO_CONSOLE_HOST}
    volumes:
      - minio-data:/data
    command:
      - server
      - /data
      - --console-address
      - ":9001"
    networks:
      - web
      - s3

  create-minio-bucket:
    profiles:
      - create-minio-bucket
    image: minio/mc
    depends_on:
      - minio
    environment:
      S3_ENDPOINT:
      S3_BUCKET:
      S3_ACCESS_KEY_ID:
      S3_SECRET_ACCESS_KEY:
    volumes:
      - ./minio/create-bucket.sh:/script/create-bucket.sh
    entrypoint: sh /script/create-bucket.sh
    networks:
      - s3

  rclone:
    restart: 'no'
    environment:
      BACKUP_DST: :s3,provider={S3_PROVIDER},env_auth=false,endpoint="${S3_ENDPOINT}",access_key_id=${S3_ACCESS_KEY_ID},secret_access_key=${S3_SECRET_ACCESS_KEY}:${S3_BUCKET}
    networks:
      - s3

volumes:
  pebble-test-certs:
  minio-data:
networks:
  acme:
  smtp:
  s3:
