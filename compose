#!/bin/bash

# A shortcut for docker-compose 
# Command: 
# docker-compose \
#   -f docker-coompose \
#   -f docker-compose.$ENVNAME.yml \
#   --env-file $ENVNAME.env \
#   up -d
# be shorten as:
# ./compose $ENVNAME up -d
#
# When pass test as envname to this scrpt that will
# auto prepend the dev compose file to the
# docker-compose using `-f` flag 

set -e

dev_env_name="dev"

usage(){
    echo "Usage:"
    echo "  ./compose <ENVNAME> [options] [--] [COMMAND] [ARGS...]"
    echo
    docker-compose --help | sed -n '/^Options:$/, $p'
}

wrong_params(){
    echo
    usage
    exit 1
}

check_file_exist(){
    if [[ ! -f $1 ]]; then
        echo "ERROR: No such file: $1"
        wrong_params
    fi
}

check_params(){
    if [ $# -lt 1 ]; then
        echo "ERROR: Missing env name"
        wrong_params
    fi
}

check_env(){
    env_name=${1}

    env_compose_file="docker-compose.${env_name}.yml"
    env_file="${env_name}.env"

    check_file_exist "$env_compose_file"
    check_file_exist "$env_file"

    # prepend dev env when test
    if [ "$env_name" = "test" ]; then
        env_compose_file_prepend="docker-compose.${dev_env_name}.yml"
        check_file_exist "${env_compose_file_prepend}"
        prepend_cmd="-f ${env_compose_file_prepend}"
    fi
}

execute(){
    # shellcheck disable=2086
    docker-compose \
        -f docker-compose.yml \
        $prepend_cmd \
        -f "$env_compose_file" \
        --env-file "$env_file" \
        "${@:2}"
}

check_params "$@"

check_env "$1"

execute "$@"