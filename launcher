#!/usr/bin/env bash

set -e

if [ -z "$APP_DIR" ]
then
    APP_DIR=$(dirname "$(readlink -f "$0")")
fi

usage(){
    echo "Usage:"
    echo "  ./launcher <command>"
    echo "Commands: "
    echo "  help        print this help"
    echo "  info        print launcher info"
    echo "  backup      make a backup to remote"
    echo "  restore     restore from remote backup"
    echo "  compose     compose is a wrapper for docker-compose to auto preface the compose and env file base on the \$APP_ENV environment variable."
    echo
    echo "For example: " 
    echo "
    docker-compose \\
        --file docker-compose.yml \\
        --file docker-compose.\$COMPOSE_MODE_in_env_file.yml \\
        --env-file configs/\$APP_ENV.env \\
        up -d"
    echo
    echo "May be shortend as: "
    echo "
    APP_ENV=dev ./compose up -d"
    echo
}

info(){
    echo "APP_DIR=$APP_DIR"
    echo "APP_ENV=$APP_ENV"
}

ensure_file(){
    if [[ ! -f "$1" ]]; then
        echo "ERROR: No such file $1"
    fi
}

prepare_env(){
    env_config_file="$APP_DIR/$APP_ENV.env"
    ensure_file "$env_config_file"

    # get ENV variable from config file 
    COMPOSE_MODE=$(sed -n 's/^COMPOSE_MODE=//p' "$env_config_file")
    
    env_compose_file="$APP_DIR/docker-compose.$COMPOSE_MODE.yml"
    ensure_file "$env_compose_file"
}

compose(){
    prepare_env
    # shellcheck disable=2086
    docker-compose \
        --file "$APP_DIR/docker-compose.yml" \
        --file "$env_compose_file" \
        --env-file "$env_config_file" \
        "$@"
}

ask_confirm(){
    read -rp "Are You Sure?(N/y): " input
    case "${input:0:1}" in
        Y|y)
            ;;
        *)
            echo "You make a good choice!"
            exit 0
            ;;
    esac
    verify=$RANDOM
    read -rp "Please Input $verify to verify: " input
    case $input in 
        "$verify")
            ;;
        *)
            echo "Wrong verify!"
            exit 1
            ;;
    esac
    echo "Continue..."
}

backup(){
    echo "Do backup will overwrite remote data(backup)!"
    ask_confirm
    if compose exec mariadb echo Database Running!
        then
        compose exec mariadb dbdump.sh
    else
        echo 'Database Not Running!'
        compose run --rm mariadb dbdump.sh
    fi
    # shellcheck disable=2016
    compose run --rm rclone backup.sh
}

restore(){
    echo "Do restore will overwrite local data!"
    ask_confirm
    compose run --rm rclone restore.sh
    if compose exec mariadb
    then
        compose exec mariadb dbrestore.sh
    else
        compose run --rm mariadb dbrestore.sh
    fi
}



case "$1" in 
    help)
        usage
        ;;
    backup|restore|compose|info)
        "$@"
        ;;
    *)
        echo "ERROR: Wrong <command>"
        echo
        usage
        ;;
esac